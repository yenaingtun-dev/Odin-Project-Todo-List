/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ (() => {

eval("const form = document.querySelector('#form');\nconst todoInput = document.querySelector('#todo');\nconst todoList = document.querySelector('.tasks');\n\ndocument.addEventListener(\"DOMContentLoaded\", getTodos);\nform.addEventListener(\"submit\", addTodo);\n\nfunction addTodo(e) {\n    e.preventDefault();\n    if (todoInput.value !== '') {\n        const todoDiv = document.createElement(\"div\");\n        todoDiv.classList.add('todo', 'flex', 'justify-between', 'items-center', 'bg-yellow-200', 'text-gray-500', 'rounded-lg', 'px-3', 'py-1', 'mb-2');\n        const newTodo = document.createElement(\"li\");\n        newTodo.classList.add(\"todo-item\");\n        newTodo.innerText = todoInput.value;\n        todoDiv.appendChild(newTodo);\n        todoDiv.addEventListener('dblclick', (e) => {\n            const editTodo = prompt('edit todo', newTodo.innerHTML);\n            if (editTodo !== null && editTodo !== '') {\n                newTodo.innerHTML = editTodo;\n            }\n        })\n        todoInput.value = \"\";\n        const btnDiv = document.createElement(\"div\");\n        // complete button\n        const completedButton = document.createElement(\"button\");\n        completedButton.innerHTML = `complete`;\n        completedButton.classList.add('complete-btn', 'bg-teal-200', 'px-2', 'py-1', 'mr-1', 'rounded-lg', 'text-teal-600', 'hover:bg-teal-300', 'text-xs');\n        btnDiv.appendChild(completedButton);\n        completedButton.addEventListener('click', (e) => {\n            if (newTodo.style.textDecoration == 'line-through') {\n                newTodo.style.textDecoration = 'none';\n                todoDiv.style.backgroundColor = 'yellow';\n                completedButton.innerHTML = 'complete';\n            } else {\n                newTodo.style.textDecoration = 'line-through';\n                todoDiv.style.backgroundColor = 'green';\n                completedButton.innerHTML = 'completed';\n            }\n        });\n        //trash button\n        const trashButton = document.createElement(\"button\");\n        trashButton.innerHTML = `delete`;\n        trashButton.classList.add('trash-btn', 'bg-rose-200', 'px-2', 'py-1', 'rounded-lg', 'text-rose-600', 'hover:bg-rose-300', 'text-xs');\n        btnDiv.appendChild(trashButton);\n        trashButton.addEventListener('click', (e) => {\n            if (confirm(\"Delete a todo!\") == true) {\n                removeTodo(e);\n            }\n        });\n        todoDiv.append(btnDiv);\n        //attach final Todo\n        todoList.appendChild(todoDiv);\n        saveLocalTodos(newTodo.innerHTML);\n    } else {\n        alert('u need to add todo');\n    }\n}\n\nfunction saveLocalTodos(todo) {\n    let todos;\n    if (localStorage.getItem(\"todos\") === null) {\n        todos = [];\n    } else {\n        todos = JSON.parse(localStorage.getItem(\"todos\"));\n    }\n    todos.push(todo);\n    localStorage.setItem(\"todos\", JSON.stringify(todos));\n}\n\nfunction removeTodo(e) {\n    const item = e.target;\n    if (item.classList[0] === \"trash-btn\") {\n        const todo = item.parentElement.parentElement;\n        removeLocalTodos(todo);\n        todo.remove();\n    }\n    if (item.classList[0] === \"complete-btn\") {\n        const todo = item.parentElement;\n        todo.classList.toggle(\"completed\");\n    }\n}\n\nfunction removeLocalTodos(todo) {\n    let todos;\n    if (localStorage.getItem(\"todos\") === null) {\n        todos = [];\n    } else {\n        todos = JSON.parse(localStorage.getItem(\"todos\"));\n    }\n    const todoIndex = todo.children[0].innerText;\n    todos.splice(todos.indexOf(todoIndex), 1);\n    localStorage.setItem(\"todos\", JSON.stringify(todos));\n}\n\n\nfunction getTodos() {\n    let todos;\n    if (localStorage.getItem(\"todos\") === null) {\n        todos = [];\n    } else {\n        todos = JSON.parse(localStorage.getItem(\"todos\"));\n    }\n    todos.forEach(function (todo) {\n        const todoDiv = document.createElement(\"div\");\n        todoDiv.classList.add('todo', 'flex', 'justify-between', 'items-center', 'bg-yellow-200', 'text-gray-500', 'rounded-lg', 'px-3', 'py-1', 'mb-2');\n        const newTodo = document.createElement(\"li\");\n        newTodo.classList.add(\"todo-item\");\n        newTodo.innerText = todo;\n        todoDiv.appendChild(newTodo);\n        todoDiv.addEventListener('dblclick', (e) => {\n            const editTodo = prompt('edit todo', newTodo.innerHTML);\n            if (editTodo !== null && editTodo !== '') {\n                removeLocalTodos(e.target);\n                newTodo.innerHTML = editTodo;\n                saveLocalTodos(newTodo.innerHTML);\n            }\n        })\n        const btnDiv = document.createElement(\"div\");\n        // complete button\n        const completedButton = document.createElement(\"button\");\n        completedButton.innerHTML = `complete`;\n        completedButton.classList.add('complete-btn', 'bg-teal-200', 'px-2', 'py-1', 'mr-1', 'rounded-lg', 'text-teal-600', 'hover:bg-teal-300', 'text-xs');\n        btnDiv.appendChild(completedButton);\n        completedButton.addEventListener('click', (e) => {\n            if (newTodo.style.textDecoration == 'line-through') {\n                newTodo.style.textDecoration = 'none';\n                todoDiv.style.backgroundColor = 'yellow';\n                completedButton.innerHTML = 'complete';\n            } else {\n                newTodo.style.textDecoration = 'line-through';\n                todoDiv.style.backgroundColor = 'green';\n                completedButton.innerHTML = 'completed';\n            }\n        });\n        //trash button\n        const trashButton = document.createElement(\"button\");\n        trashButton.innerHTML = `delete`;\n        trashButton.classList.add('trash-btn', 'bg-rose-200', 'px-2', 'py-1', 'rounded-lg', 'text-rose-600', 'hover:bg-rose-300', 'text-xs');\n        btnDiv.appendChild(trashButton);\n        trashButton.addEventListener('click', (e) => {\n            if (confirm(\"Delete a todo!\") == true) {\n                removeTodo(e);\n            }\n        });\n        todoDiv.append(btnDiv);\n        //attach final Todo\n        todoList.appendChild(todoDiv);\n    });\n}\n\n//# sourceURL=webpack://13.odin-project-todo-list/./src/index.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/index.js"]();
/******/ 	
/******/ })()
;